// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Haiserest/app/ent/migrate"

	"github.com/Haiserest/app/ent/patient"
	"github.com/Haiserest/app/ent/statustracking"
	"github.com/Haiserest/app/ent/treatment"
	"github.com/Haiserest/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// StatusTracking is the client for interacting with the StatusTracking builders.
	StatusTracking *StatusTrackingClient
	// Treatment is the client for interacting with the Treatment builders.
	Treatment *TreatmentClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Patient = NewPatientClient(c.config)
	c.StatusTracking = NewStatusTrackingClient(c.config)
	c.Treatment = NewTreatmentClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		Patient:        NewPatientClient(cfg),
		StatusTracking: NewStatusTrackingClient(cfg),
		Treatment:      NewTreatmentClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:         cfg,
		Patient:        NewPatientClient(cfg),
		StatusTracking: NewStatusTrackingClient(cfg),
		Treatment:      NewTreatmentClient(cfg),
		User:           NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Patient.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Patient.Use(hooks...)
	c.StatusTracking.Use(hooks...)
	c.Treatment.Use(hooks...)
	c.User.Use(hooks...)
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientID queries the patient_id edge of a Patient.
func (c *PatientClient) QueryPatientID(pa *Patient) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientIDTable, patient.PatientIDColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// StatusTrackingClient is a client for the StatusTracking schema.
type StatusTrackingClient struct {
	config
}

// NewStatusTrackingClient returns a client for the StatusTracking from the given config.
func NewStatusTrackingClient(c config) *StatusTrackingClient {
	return &StatusTrackingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statustracking.Hooks(f(g(h())))`.
func (c *StatusTrackingClient) Use(hooks ...Hook) {
	c.hooks.StatusTracking = append(c.hooks.StatusTracking, hooks...)
}

// Create returns a create builder for StatusTracking.
func (c *StatusTrackingClient) Create() *StatusTrackingCreate {
	mutation := newStatusTrackingMutation(c.config, OpCreate)
	return &StatusTrackingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for StatusTracking.
func (c *StatusTrackingClient) Update() *StatusTrackingUpdate {
	mutation := newStatusTrackingMutation(c.config, OpUpdate)
	return &StatusTrackingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatusTrackingClient) UpdateOne(st *StatusTracking) *StatusTrackingUpdateOne {
	mutation := newStatusTrackingMutation(c.config, OpUpdateOne, withStatusTracking(st))
	return &StatusTrackingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatusTrackingClient) UpdateOneID(id int) *StatusTrackingUpdateOne {
	mutation := newStatusTrackingMutation(c.config, OpUpdateOne, withStatusTrackingID(id))
	return &StatusTrackingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatusTracking.
func (c *StatusTrackingClient) Delete() *StatusTrackingDelete {
	mutation := newStatusTrackingMutation(c.config, OpDelete)
	return &StatusTrackingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StatusTrackingClient) DeleteOne(st *StatusTracking) *StatusTrackingDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StatusTrackingClient) DeleteOneID(id int) *StatusTrackingDeleteOne {
	builder := c.Delete().Where(statustracking.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatusTrackingDeleteOne{builder}
}

// Create returns a query builder for StatusTracking.
func (c *StatusTrackingClient) Query() *StatusTrackingQuery {
	return &StatusTrackingQuery{config: c.config}
}

// Get returns a StatusTracking entity by its id.
func (c *StatusTrackingClient) Get(ctx context.Context, id int) (*StatusTracking, error) {
	return c.Query().Where(statustracking.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatusTrackingClient) GetX(ctx context.Context, id int) *StatusTracking {
	st, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return st
}

// QueryStatusID queries the status_id edge of a StatusTracking.
func (c *StatusTrackingClient) QueryStatusID(st *StatusTracking) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := st.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statustracking.Table, statustracking.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statustracking.StatusIDTable, statustracking.StatusIDColumn),
		)
		fromV = sqlgraph.Neighbors(st.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatusTrackingClient) Hooks() []Hook {
	return c.hooks.StatusTracking
}

// TreatmentClient is a client for the Treatment schema.
type TreatmentClient struct {
	config
}

// NewTreatmentClient returns a client for the Treatment from the given config.
func NewTreatmentClient(c config) *TreatmentClient {
	return &TreatmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treatment.Hooks(f(g(h())))`.
func (c *TreatmentClient) Use(hooks ...Hook) {
	c.hooks.Treatment = append(c.hooks.Treatment, hooks...)
}

// Create returns a create builder for Treatment.
func (c *TreatmentClient) Create() *TreatmentCreate {
	mutation := newTreatmentMutation(c.config, OpCreate)
	return &TreatmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Treatment.
func (c *TreatmentClient) Update() *TreatmentUpdate {
	mutation := newTreatmentMutation(c.config, OpUpdate)
	return &TreatmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreatmentClient) UpdateOne(t *Treatment) *TreatmentUpdateOne {
	mutation := newTreatmentMutation(c.config, OpUpdateOne, withTreatment(t))
	return &TreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreatmentClient) UpdateOneID(id int) *TreatmentUpdateOne {
	mutation := newTreatmentMutation(c.config, OpUpdateOne, withTreatmentID(id))
	return &TreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Treatment.
func (c *TreatmentClient) Delete() *TreatmentDelete {
	mutation := newTreatmentMutation(c.config, OpDelete)
	return &TreatmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreatmentClient) DeleteOne(t *Treatment) *TreatmentDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreatmentClient) DeleteOneID(id int) *TreatmentDeleteOne {
	builder := c.Delete().Where(treatment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreatmentDeleteOne{builder}
}

// Create returns a query builder for Treatment.
func (c *TreatmentClient) Query() *TreatmentQuery {
	return &TreatmentQuery{config: c.config}
}

// Get returns a Treatment entity by its id.
func (c *TreatmentClient) Get(ctx context.Context, id int) (*Treatment, error) {
	return c.Query().Where(treatment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreatmentClient) GetX(ctx context.Context, id int) *Treatment {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryPatientID queries the patient_id edge of a Treatment.
func (c *TreatmentClient) QueryPatientID(t *Treatment) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.PatientIDTable, treatment.PatientIDColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorID queries the doctor_id edge of a Treatment.
func (c *TreatmentClient) QueryDoctorID(t *Treatment) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.DoctorIDTable, treatment.DoctorIDColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusID queries the status_id edge of a Treatment.
func (c *TreatmentClient) QueryStatusID(t *Treatment) *StatusTrackingQuery {
	query := &StatusTrackingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatment.Table, treatment.FieldID, id),
			sqlgraph.To(statustracking.Table, statustracking.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, treatment.StatusIDTable, treatment.StatusIDColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreatmentClient) Hooks() []Hook {
	return c.hooks.Treatment
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryDoctorID queries the doctor_id edge of a User.
func (c *UserClient) QueryDoctorID(u *User) *TreatmentQuery {
	query := &TreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(treatment.Table, treatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.DoctorIDTable, user.DoctorIDColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
