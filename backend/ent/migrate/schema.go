// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// PatientsColumns holds the columns for the "patients" table.
	PatientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "patient_age", Type: field.TypeInt},
		{Name: "patient_name", Type: field.TypeString},
	}
	// PatientsTable holds the schema information for the "patients" table.
	PatientsTable = &schema.Table{
		Name:        "patients",
		Columns:     PatientsColumns,
		PrimaryKey:  []*schema.Column{PatientsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// StatusTrackingsColumns holds the columns for the "status_trackings" table.
	StatusTrackingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeString},
	}
	// StatusTrackingsTable holds the schema information for the "status_trackings" table.
	StatusTrackingsTable = &schema.Table{
		Name:        "status_trackings",
		Columns:     StatusTrackingsColumns,
		PrimaryKey:  []*schema.Column{StatusTrackingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// TreatmentsColumns holds the columns for the "treatments" table.
	TreatmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date_appoint", Type: field.TypeTime},
		{Name: "symptom", Type: field.TypeString},
		{Name: "patient_patient_id", Type: field.TypeInt, Nullable: true},
		{Name: "status_tracking_status_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_doctor_id", Type: field.TypeInt, Nullable: true},
	}
	// TreatmentsTable holds the schema information for the "treatments" table.
	TreatmentsTable = &schema.Table{
		Name:       "treatments",
		Columns:    TreatmentsColumns,
		PrimaryKey: []*schema.Column{TreatmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "treatments_patients_patient_id",
				Columns: []*schema.Column{TreatmentsColumns[3]},

				RefColumns: []*schema.Column{PatientsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "treatments_status_trackings_status_id",
				Columns: []*schema.Column{TreatmentsColumns[4]},

				RefColumns: []*schema.Column{StatusTrackingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "treatments_users_doctor_id",
				Columns: []*schema.Column{TreatmentsColumns[5]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "doctor_email", Type: field.TypeString},
		{Name: "doctor_name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		PatientsTable,
		StatusTrackingsTable,
		TreatmentsTable,
		UsersTable,
	}
)

func init() {
	TreatmentsTable.ForeignKeys[0].RefTable = PatientsTable
	TreatmentsTable.ForeignKeys[1].RefTable = StatusTrackingsTable
	TreatmentsTable.ForeignKeys[2].RefTable = UsersTable
}
