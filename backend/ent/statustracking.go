// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/Haiserest/app/ent/statustracking"
	"github.com/facebookincubator/ent/dialect/sql"
)

// StatusTracking is the model entity for the StatusTracking schema.
type StatusTracking struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusTrackingQuery when eager-loading is set.
	Edges StatusTrackingEdges `json:"edges"`
}

// StatusTrackingEdges holds the relations/edges for other nodes in the graph.
type StatusTrackingEdges struct {
	// StatusID holds the value of the status_id edge.
	StatusID []*Treatment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusIDOrErr returns the StatusID value or an error if the edge
// was not loaded in eager-loading.
func (e StatusTrackingEdges) StatusIDOrErr() ([]*Treatment, error) {
	if e.loadedTypes[0] {
		return e.StatusID, nil
	}
	return nil, &NotLoadedError{edge: "status_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StatusTracking) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StatusTracking fields.
func (st *StatusTracking) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statustracking.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	st.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[0])
	} else if value.Valid {
		st.Status = value.String
	}
	return nil
}

// QueryStatusID queries the status_id edge of the StatusTracking.
func (st *StatusTracking) QueryStatusID() *TreatmentQuery {
	return (&StatusTrackingClient{config: st.config}).QueryStatusID(st)
}

// Update returns a builder for updating this StatusTracking.
// Note that, you need to call StatusTracking.Unwrap() before calling this method, if this StatusTracking
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *StatusTracking) Update() *StatusTrackingUpdateOne {
	return (&StatusTrackingClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (st *StatusTracking) Unwrap() *StatusTracking {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: StatusTracking is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *StatusTracking) String() string {
	var builder strings.Builder
	builder.WriteString("StatusTracking(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", status=")
	builder.WriteString(st.Status)
	builder.WriteByte(')')
	return builder.String()
}

// StatusTrackings is a parsable slice of StatusTracking.
type StatusTrackings []*StatusTracking

func (st StatusTrackings) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
