// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/Haiserest/app/ent/statustracking"
	"github.com/Haiserest/app/ent/treatment"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// StatusTrackingCreate is the builder for creating a StatusTracking entity.
type StatusTrackingCreate struct {
	config
	mutation *StatusTrackingMutation
	hooks    []Hook
}

// SetStatus sets the status field.
func (stc *StatusTrackingCreate) SetStatus(s string) *StatusTrackingCreate {
	stc.mutation.SetStatus(s)
	return stc
}

// AddStatusIDIDs adds the status_id edge to Treatment by ids.
func (stc *StatusTrackingCreate) AddStatusIDIDs(ids ...int) *StatusTrackingCreate {
	stc.mutation.AddStatusIDIDs(ids...)
	return stc
}

// AddStatusID adds the status_id edges to Treatment.
func (stc *StatusTrackingCreate) AddStatusID(t ...*Treatment) *StatusTrackingCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return stc.AddStatusIDIDs(ids...)
}

// Mutation returns the StatusTrackingMutation object of the builder.
func (stc *StatusTrackingCreate) Mutation() *StatusTrackingMutation {
	return stc.mutation
}

// Save creates the StatusTracking in the database.
func (stc *StatusTrackingCreate) Save(ctx context.Context) (*StatusTracking, error) {
	if _, ok := stc.mutation.Status(); !ok {
		return nil, &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := stc.mutation.Status(); ok {
		if err := statustracking.StatusValidator(v); err != nil {
			return nil, &ValidationError{Name: "status", err: fmt.Errorf("ent: validator failed for field \"status\": %w", err)}
		}
	}
	var (
		err  error
		node *StatusTracking
	)
	if len(stc.hooks) == 0 {
		node, err = stc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatusTrackingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stc.mutation = mutation
			node, err = stc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stc.hooks) - 1; i >= 0; i-- {
			mut = stc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (stc *StatusTrackingCreate) SaveX(ctx context.Context) *StatusTracking {
	v, err := stc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (stc *StatusTrackingCreate) sqlSave(ctx context.Context) (*StatusTracking, error) {
	st, _spec := stc.createSpec()
	if err := sqlgraph.CreateNode(ctx, stc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	st.ID = int(id)
	return st, nil
}

func (stc *StatusTrackingCreate) createSpec() (*StatusTracking, *sqlgraph.CreateSpec) {
	var (
		st    = &StatusTracking{config: stc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statustracking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statustracking.FieldID,
			},
		}
	)
	if value, ok := stc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statustracking.FieldStatus,
		})
		st.Status = value
	}
	if nodes := stc.mutation.StatusIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statustracking.StatusIDTable,
			Columns: []string{statustracking.StatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return st, _spec
}
