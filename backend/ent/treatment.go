// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/Haiserest/app/ent/patient"
	"github.com/Haiserest/app/ent/statustracking"
	"github.com/Haiserest/app/ent/treatment"
	"github.com/Haiserest/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Treatment is the model entity for the Treatment schema.
type Treatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DateAppoint holds the value of the "date_appoint" field.
	DateAppoint time.Time `json:"date_appoint,omitempty"`
	// Symptom holds the value of the "symptom" field.
	Symptom string `json:"symptom,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreatmentQuery when eager-loading is set.
	Edges                     TreatmentEdges `json:"edges"`
	patient_patient_id        *int
	status_tracking_status_id *int
	user_doctor_id            *int
}

// TreatmentEdges holds the relations/edges for other nodes in the graph.
type TreatmentEdges struct {
	// PatientID holds the value of the patient_id edge.
	PatientID *Patient
	// DoctorID holds the value of the doctor_id edge.
	DoctorID *User
	// StatusID holds the value of the status_id edge.
	StatusID *StatusTracking
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PatientIDOrErr returns the PatientID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) PatientIDOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.PatientID == nil {
			// The edge patient_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.PatientID, nil
	}
	return nil, &NotLoadedError{edge: "patient_id"}
}

// DoctorIDOrErr returns the DoctorID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) DoctorIDOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.DoctorID == nil {
			// The edge doctor_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.DoctorID, nil
	}
	return nil, &NotLoadedError{edge: "doctor_id"}
}

// StatusIDOrErr returns the StatusID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) StatusIDOrErr() (*StatusTracking, error) {
	if e.loadedTypes[2] {
		if e.StatusID == nil {
			// The edge status_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statustracking.Label}
		}
		return e.StatusID, nil
	}
	return nil, &NotLoadedError{edge: "status_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Treatment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // date_appoint
		&sql.NullString{}, // symptom
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Treatment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // patient_patient_id
		&sql.NullInt64{}, // status_tracking_status_id
		&sql.NullInt64{}, // user_doctor_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Treatment fields.
func (t *Treatment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(treatment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date_appoint", values[0])
	} else if value.Valid {
		t.DateAppoint = value.Time
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field symptom", values[1])
	} else if value.Valid {
		t.Symptom = value.String
	}
	values = values[2:]
	if len(values) == len(treatment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_patient_id", value)
		} else if value.Valid {
			t.patient_patient_id = new(int)
			*t.patient_patient_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field status_tracking_status_id", value)
		} else if value.Valid {
			t.status_tracking_status_id = new(int)
			*t.status_tracking_status_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_doctor_id", value)
		} else if value.Valid {
			t.user_doctor_id = new(int)
			*t.user_doctor_id = int(value.Int64)
		}
	}
	return nil
}

// QueryPatientID queries the patient_id edge of the Treatment.
func (t *Treatment) QueryPatientID() *PatientQuery {
	return (&TreatmentClient{config: t.config}).QueryPatientID(t)
}

// QueryDoctorID queries the doctor_id edge of the Treatment.
func (t *Treatment) QueryDoctorID() *UserQuery {
	return (&TreatmentClient{config: t.config}).QueryDoctorID(t)
}

// QueryStatusID queries the status_id edge of the Treatment.
func (t *Treatment) QueryStatusID() *StatusTrackingQuery {
	return (&TreatmentClient{config: t.config}).QueryStatusID(t)
}

// Update returns a builder for updating this Treatment.
// Note that, you need to call Treatment.Unwrap() before calling this method, if this Treatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Treatment) Update() *TreatmentUpdateOne {
	return (&TreatmentClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Treatment) Unwrap() *Treatment {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Treatment is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Treatment) String() string {
	var builder strings.Builder
	builder.WriteString("Treatment(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", date_appoint=")
	builder.WriteString(t.DateAppoint.Format(time.ANSIC))
	builder.WriteString(", symptom=")
	builder.WriteString(t.Symptom)
	builder.WriteByte(')')
	return builder.String()
}

// Treatments is a parsable slice of Treatment.
type Treatments []*Treatment

func (t Treatments) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
