// Code generated by entc, DO NOT EDIT.

package treatment

import (
	"time"

	"github.com/Haiserest/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DateAppoint applies equality check predicate on the "date_appoint" field. It's identical to DateAppointEQ.
func DateAppoint(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAppoint), v))
	})
}

// Symptom applies equality check predicate on the "symptom" field. It's identical to SymptomEQ.
func Symptom(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// DateAppointEQ applies the EQ predicate on the "date_appoint" field.
func DateAppointEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAppoint), v))
	})
}

// DateAppointNEQ applies the NEQ predicate on the "date_appoint" field.
func DateAppointNEQ(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateAppoint), v))
	})
}

// DateAppointIn applies the In predicate on the "date_appoint" field.
func DateAppointIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateAppoint), v...))
	})
}

// DateAppointNotIn applies the NotIn predicate on the "date_appoint" field.
func DateAppointNotIn(vs ...time.Time) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateAppoint), v...))
	})
}

// DateAppointGT applies the GT predicate on the "date_appoint" field.
func DateAppointGT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateAppoint), v))
	})
}

// DateAppointGTE applies the GTE predicate on the "date_appoint" field.
func DateAppointGTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateAppoint), v))
	})
}

// DateAppointLT applies the LT predicate on the "date_appoint" field.
func DateAppointLT(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateAppoint), v))
	})
}

// DateAppointLTE applies the LTE predicate on the "date_appoint" field.
func DateAppointLTE(v time.Time) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateAppoint), v))
	})
}

// SymptomEQ applies the EQ predicate on the "symptom" field.
func SymptomEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// SymptomNEQ applies the NEQ predicate on the "symptom" field.
func SymptomNEQ(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptom), v))
	})
}

// SymptomIn applies the In predicate on the "symptom" field.
func SymptomIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptom), v...))
	})
}

// SymptomNotIn applies the NotIn predicate on the "symptom" field.
func SymptomNotIn(vs ...string) predicate.Treatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Treatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptom), v...))
	})
}

// SymptomGT applies the GT predicate on the "symptom" field.
func SymptomGT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptom), v))
	})
}

// SymptomGTE applies the GTE predicate on the "symptom" field.
func SymptomGTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptom), v))
	})
}

// SymptomLT applies the LT predicate on the "symptom" field.
func SymptomLT(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptom), v))
	})
}

// SymptomLTE applies the LTE predicate on the "symptom" field.
func SymptomLTE(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptom), v))
	})
}

// SymptomContains applies the Contains predicate on the "symptom" field.
func SymptomContains(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymptom), v))
	})
}

// SymptomHasPrefix applies the HasPrefix predicate on the "symptom" field.
func SymptomHasPrefix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymptom), v))
	})
}

// SymptomHasSuffix applies the HasSuffix predicate on the "symptom" field.
func SymptomHasSuffix(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymptom), v))
	})
}

// SymptomEqualFold applies the EqualFold predicate on the "symptom" field.
func SymptomEqualFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymptom), v))
	})
}

// SymptomContainsFold applies the ContainsFold predicate on the "symptom" field.
func SymptomContainsFold(v string) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymptom), v))
	})
}

// HasPatientID applies the HasEdge predicate on the "patient_id" edge.
func HasPatientID() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientIDTable, PatientIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientIDWith applies the HasEdge predicate on the "patient_id" edge with a given conditions (other predicates).
func HasPatientIDWith(preds ...predicate.Patient) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientIDTable, PatientIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctorID applies the HasEdge predicate on the "doctor_id" edge.
func HasDoctorID() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorIDTable, DoctorIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorIDWith applies the HasEdge predicate on the "doctor_id" edge with a given conditions (other predicates).
func HasDoctorIDWith(preds ...predicate.User) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DoctorIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DoctorIDTable, DoctorIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatusID applies the HasEdge predicate on the "status_id" edge.
func HasStatusID() predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusIDTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusIDTable, StatusIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusIDWith applies the HasEdge predicate on the "status_id" edge with a given conditions (other predicates).
func HasStatusIDWith(preds ...predicate.StatusTracking) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusIDInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatusIDTable, StatusIDColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Treatment) predicate.Treatment {
	return predicate.Treatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
