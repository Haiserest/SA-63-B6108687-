// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/Haiserest/app/ent/patient"
	"github.com/Haiserest/app/ent/predicate"
	"github.com/Haiserest/app/ent/statustracking"
	"github.com/Haiserest/app/ent/treatment"
	"github.com/Haiserest/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TreatmentUpdate is the builder for updating Treatment entities.
type TreatmentUpdate struct {
	config
	hooks      []Hook
	mutation   *TreatmentMutation
	predicates []predicate.Treatment
}

// Where adds a new predicate for the builder.
func (tu *TreatmentUpdate) Where(ps ...predicate.Treatment) *TreatmentUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetDateAppoint sets the date_appoint field.
func (tu *TreatmentUpdate) SetDateAppoint(t time.Time) *TreatmentUpdate {
	tu.mutation.SetDateAppoint(t)
	return tu
}

// SetNillableDateAppoint sets the date_appoint field if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableDateAppoint(t *time.Time) *TreatmentUpdate {
	if t != nil {
		tu.SetDateAppoint(*t)
	}
	return tu
}

// SetSymptom sets the symptom field.
func (tu *TreatmentUpdate) SetSymptom(s string) *TreatmentUpdate {
	tu.mutation.SetSymptom(s)
	return tu
}

// SetPatientIDID sets the patient_id edge to Patient by id.
func (tu *TreatmentUpdate) SetPatientIDID(id int) *TreatmentUpdate {
	tu.mutation.SetPatientIDID(id)
	return tu
}

// SetNillablePatientIDID sets the patient_id edge to Patient by id if the given value is not nil.
func (tu *TreatmentUpdate) SetNillablePatientIDID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetPatientIDID(*id)
	}
	return tu
}

// SetPatientID sets the patient_id edge to Patient.
func (tu *TreatmentUpdate) SetPatientID(p *Patient) *TreatmentUpdate {
	return tu.SetPatientIDID(p.ID)
}

// SetDoctorIDID sets the doctor_id edge to User by id.
func (tu *TreatmentUpdate) SetDoctorIDID(id int) *TreatmentUpdate {
	tu.mutation.SetDoctorIDID(id)
	return tu
}

// SetNillableDoctorIDID sets the doctor_id edge to User by id if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableDoctorIDID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetDoctorIDID(*id)
	}
	return tu
}

// SetDoctorID sets the doctor_id edge to User.
func (tu *TreatmentUpdate) SetDoctorID(u *User) *TreatmentUpdate {
	return tu.SetDoctorIDID(u.ID)
}

// SetStatusIDID sets the status_id edge to StatusTracking by id.
func (tu *TreatmentUpdate) SetStatusIDID(id int) *TreatmentUpdate {
	tu.mutation.SetStatusIDID(id)
	return tu
}

// SetNillableStatusIDID sets the status_id edge to StatusTracking by id if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableStatusIDID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetStatusIDID(*id)
	}
	return tu
}

// SetStatusID sets the status_id edge to StatusTracking.
func (tu *TreatmentUpdate) SetStatusID(s *StatusTracking) *TreatmentUpdate {
	return tu.SetStatusIDID(s.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tu *TreatmentUpdate) Mutation() *TreatmentMutation {
	return tu.mutation
}

// ClearPatientID clears the patient_id edge to Patient.
func (tu *TreatmentUpdate) ClearPatientID() *TreatmentUpdate {
	tu.mutation.ClearPatientID()
	return tu
}

// ClearDoctorID clears the doctor_id edge to User.
func (tu *TreatmentUpdate) ClearDoctorID() *TreatmentUpdate {
	tu.mutation.ClearDoctorID()
	return tu
}

// ClearStatusID clears the status_id edge to StatusTracking.
func (tu *TreatmentUpdate) ClearStatusID() *TreatmentUpdate {
	tu.mutation.ClearStatusID()
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TreatmentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreatmentUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreatmentUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreatmentUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TreatmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatment.Table,
			Columns: treatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatment.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.DateAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treatment.FieldDateAppoint,
		})
	}
	if value, ok := tu.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatment.FieldSymptom,
		})
	}
	if tu.mutation.PatientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.PatientIDTable,
			Columns: []string{treatment.PatientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PatientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.PatientIDTable,
			Columns: []string{treatment.PatientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DoctorIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.DoctorIDTable,
			Columns: []string{treatment.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DoctorIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.DoctorIDTable,
			Columns: []string{treatment.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.StatusIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.StatusIDTable,
			Columns: []string{treatment.StatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustracking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.StatusIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.StatusIDTable,
			Columns: []string{treatment.StatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustracking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TreatmentUpdateOne is the builder for updating a single Treatment entity.
type TreatmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *TreatmentMutation
}

// SetDateAppoint sets the date_appoint field.
func (tuo *TreatmentUpdateOne) SetDateAppoint(t time.Time) *TreatmentUpdateOne {
	tuo.mutation.SetDateAppoint(t)
	return tuo
}

// SetNillableDateAppoint sets the date_appoint field if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableDateAppoint(t *time.Time) *TreatmentUpdateOne {
	if t != nil {
		tuo.SetDateAppoint(*t)
	}
	return tuo
}

// SetSymptom sets the symptom field.
func (tuo *TreatmentUpdateOne) SetSymptom(s string) *TreatmentUpdateOne {
	tuo.mutation.SetSymptom(s)
	return tuo
}

// SetPatientIDID sets the patient_id edge to Patient by id.
func (tuo *TreatmentUpdateOne) SetPatientIDID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetPatientIDID(id)
	return tuo
}

// SetNillablePatientIDID sets the patient_id edge to Patient by id if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillablePatientIDID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetPatientIDID(*id)
	}
	return tuo
}

// SetPatientID sets the patient_id edge to Patient.
func (tuo *TreatmentUpdateOne) SetPatientID(p *Patient) *TreatmentUpdateOne {
	return tuo.SetPatientIDID(p.ID)
}

// SetDoctorIDID sets the doctor_id edge to User by id.
func (tuo *TreatmentUpdateOne) SetDoctorIDID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetDoctorIDID(id)
	return tuo
}

// SetNillableDoctorIDID sets the doctor_id edge to User by id if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableDoctorIDID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetDoctorIDID(*id)
	}
	return tuo
}

// SetDoctorID sets the doctor_id edge to User.
func (tuo *TreatmentUpdateOne) SetDoctorID(u *User) *TreatmentUpdateOne {
	return tuo.SetDoctorIDID(u.ID)
}

// SetStatusIDID sets the status_id edge to StatusTracking by id.
func (tuo *TreatmentUpdateOne) SetStatusIDID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetStatusIDID(id)
	return tuo
}

// SetNillableStatusIDID sets the status_id edge to StatusTracking by id if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableStatusIDID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetStatusIDID(*id)
	}
	return tuo
}

// SetStatusID sets the status_id edge to StatusTracking.
func (tuo *TreatmentUpdateOne) SetStatusID(s *StatusTracking) *TreatmentUpdateOne {
	return tuo.SetStatusIDID(s.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tuo *TreatmentUpdateOne) Mutation() *TreatmentMutation {
	return tuo.mutation
}

// ClearPatientID clears the patient_id edge to Patient.
func (tuo *TreatmentUpdateOne) ClearPatientID() *TreatmentUpdateOne {
	tuo.mutation.ClearPatientID()
	return tuo
}

// ClearDoctorID clears the doctor_id edge to User.
func (tuo *TreatmentUpdateOne) ClearDoctorID() *TreatmentUpdateOne {
	tuo.mutation.ClearDoctorID()
	return tuo
}

// ClearStatusID clears the status_id edge to StatusTracking.
func (tuo *TreatmentUpdateOne) ClearStatusID() *TreatmentUpdateOne {
	tuo.mutation.ClearStatusID()
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TreatmentUpdateOne) Save(ctx context.Context) (*Treatment, error) {

	var (
		err  error
		node *Treatment
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) SaveX(ctx context.Context) *Treatment {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TreatmentUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TreatmentUpdateOne) sqlSave(ctx context.Context) (t *Treatment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatment.Table,
			Columns: treatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatment.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Treatment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.DateAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treatment.FieldDateAppoint,
		})
	}
	if value, ok := tuo.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatment.FieldSymptom,
		})
	}
	if tuo.mutation.PatientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.PatientIDTable,
			Columns: []string{treatment.PatientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PatientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.PatientIDTable,
			Columns: []string{treatment.PatientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DoctorIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.DoctorIDTable,
			Columns: []string{treatment.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DoctorIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.DoctorIDTable,
			Columns: []string{treatment.DoctorIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.StatusIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.StatusIDTable,
			Columns: []string{treatment.StatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustracking.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.StatusIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.StatusIDTable,
			Columns: []string{treatment.StatusIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statustracking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Treatment{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
